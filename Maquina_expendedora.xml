<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/**Constantes**/
//Tiempo maximo que espera la maquina expendedora antes de cancelar la operacion
const int tiempoAgotado = 10;

//constante que indica el stock maximo de todas las botella
const int STOCK = 10;

//constante que indica la capacidad maxima -4 de almacenamiento de cospeles de la maquina
const int CAPACIDAD_ALCANCIA = 296;

//cosntante que indida la cantidad de bebidas distintas que contiene la maquina expendedora
const int N = 3;

/**Estructuras**/
typedef struct{
    int id;      // Identidicador de bebidas
    int valor;   // Precio de la botella
    int stock;   // Cantidad de botellas disponibles
    int vendidos; // Cantidad de botellas vendidas desde la ultima reposicion
}Bebida;

/**Variables globales**/
Bebida bebidas[N] = {{0,3,STOCK,0},{1,4,STOCK,0},{2,5,STOCK,0}};

/**Variables globales enteras**/
//cantidad de cospeles que el usuario actual ha ingresado en la máquina. 
int cospelesIngresados = 0;

//cantidad de cospeles que se han recolectado la última recoleccion de ganancias
int recolectados = 0;

//id de la bebida de interes para alguna operacion
int idBebida;

/**Canales**/

// sincroniza entre usuario y máquina la inserción de un cospel
chan ingresa;

//sincroniza entre usuario y máquina la cancelación de la operación.
chan cancela;

//sincroniza entre auditor y máquina el evento de la llegada del auditor para recolectar la recaudacion.
chan sacarRecaudacion;

//sincroniza entre auditor y máquina el evento de la llegada del auditor para reponer el stock.
chan reponerStock;

//sincroniza entre el usuario y la máquina el pedido de una bebida.
chan pide;

//sincroniza entre el usuario y la máquina en caso que no se efectue la compra.
chan vuelve;

//sincroniza entre el usuario y la máquina en caso que se efectue la compra.
chan compra;

</declaration>
	<template>
		<name>Maquina</name>
		<declaration>//Tiempo que la maquina expendedora lleva esperando una accion luego del primer cospel ingresado
clock x;

//true si la bebida con id = id tiene stock disponible
bool hayStockDe(int id){
    return bebidas[id].stock&gt;0;
}

//true si todas las bebidas tienen stock disponible
bool hayStock(){
    int i;
    for (i=0;i&lt;N;i++){
        if(hayStockDe(i)){
            return true;
        }
    }
    return false;
}

//true si la cantidad de cospeles ingresados es suficiente para realizar la compra
bool cubrePrecio(int id){
    return cospelesIngresados &gt;= bebidas[id].valor;
}

// Actualiza stock y cantidad de cospeles recolectados
void consumir(int id){
    bebidas[id].stock--;
    bebidas[id].vendidos++;
    recolectados +=  bebidas[id].valor;
}

//true si la cantidad de monedas recolectadass es igual a la cantidad maxima que puede almacenar la maquina
bool alcanciaLlena(){
    return recolectados&gt;=CAPACIDAD_ALCANCIA;
}


//true si la alcancia no esta llena y ademas existe al menos una bebida tiene menos stock maximo
bool puedeReponer(){
    if(alcanciaLlena()){
        return false;
    }
    else{
        int i;
        for(i=0;i&lt;N;i++){
            if(bebidas[i].stock&lt;STOCK){
                return true;
            }
        }
        return false;
    }
}

bool TodoVendido(){
    int i;
    for(i=0;i&lt;N;i++){
        if(bebidas[i].stock&gt;0){
            return false;
        }
    }
    return true;
}

bool Negativo(int id){
    return bebidas[id].stock&lt;0;
}

bool masQueMaximo(int id){
    return bebidas[id].stock&gt;STOCK;
}

bool dentroDeLimites(){
    int i;
    for(i=0;i&lt;N;i++){
        if(Negativo(i) or masQueMaximo(i)){
            return false;
        }
    }
    return true;
}

</declaration>
		<location id="id0" x="-748" y="-34">
			<name x="-799" y="-42">Libre</name>
			<urgent/>
		</location>
		<location id="id1" x="-272" y="-34">
			<name x="-238" y="-42">Ocupada</name>
			<label kind="invariant" x="-246" y="-25">x&lt;=tiempoAgotado</label>
		</location>
		<location id="id2" x="-544" y="136">
			<name x="-578" y="144">Procesando</name>
			<urgent/>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-960" y="0">recolectados&gt;0</label>
			<label kind="synchronisation" x="-986" y="17">sacarRecaudacion?</label>
			<nail x="-850" y="68"/>
			<nail x="-850" y="-25"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-960" y="-102">puedeReponer()</label>
			<label kind="synchronisation" x="-952" y="-85">reponerStock?</label>
			<nail x="-850" y="-144"/>
			<nail x="-850" y="-42"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-433" y="85">!hayStockDe(idBebida) or
!cubrePrecio(idBebida)</label>
			<label kind="synchronisation" x="-357" y="68">compra!</label>
			<label kind="assignment" x="-365" y="119">x=0</label>
			<nail x="-476" y="102"/>
			<nail x="-306" y="34"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-765" y="85">hayStockDe(idBebida) and
cubrePrecio(idBebida)</label>
			<label kind="synchronisation" x="-705" y="68">compra!</label>
			<label kind="assignment" x="-748" y="119">consumir(idBebida),
cospelesIngresados=0,
x=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-518" y="0">x &lt; tiempoAgotado</label>
			<label kind="synchronisation" x="-476" y="17">pide?</label>
			<nail x="-340" y="0"/>
			<nail x="-510" y="68"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-603" y="-76">hayStock() and !alcanciaLlena()</label>
			<label kind="synchronisation" x="-535" y="-59">ingresa?</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-153" y="-68">x&lt;tiempoAgotado</label>
			<label kind="synchronisation" x="-119" y="-51">ingresa?</label>
			<label kind="assignment" x="-110" y="-34">x=0</label>
			<nail x="-170" y="-136"/>
			<nail x="-170" y="68"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-569" y="-382">x==tiempoAgotado</label>
			<label kind="assignment" x="-586" y="-365">cospelesIngresados=0, x=0</label>
			<nail x="-272" y="-340"/>
			<nail x="-748" y="-340"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-527" y="-331">x&lt;10</label>
			<label kind="synchronisation" x="-535" y="-314">cancela?</label>
			<label kind="assignment" x="-586" y="-297">cospelesIngresados=0, x=0</label>
			<nail x="-374" y="-272"/>
			<nail x="-510" y="-272"/>
			<nail x="-646" y="-272"/>
		</transition>
	</template>
	<template>
		<name>Usuario</name>
		<location id="id3" x="-535" y="-34">
		</location>
		<location id="id4" x="-136" y="-34">
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-399" y="119">compra?</label>
			<nail x="-102" y="-34"/>
			<nail x="-102" y="136"/>
			<nail x="-646" y="136"/>
			<nail x="-646" y="-34"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-391" y="85">vuelve?</label>
			<nail x="-136" y="102"/>
			<nail x="-612" y="102"/>
			<nail x="-612" y="-34"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-365" y="17">pide!</label>
			<label kind="assignment" x="-382" y="0">idBebida = 2</label>
			<nail x="-442" y="34"/>
			<nail x="-238" y="34"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-365" y="-51">pide!</label>
			<label kind="assignment" x="-382" y="-68">idBebida = 1</label>
			<nail x="-442" y="-34"/>
			<nail x="-238" y="-34"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-365" y="-119">pide!</label>
			<label kind="assignment" x="-391" y="-136">idBebida = 0</label>
			<nail x="-442" y="-102"/>
			<nail x="-238" y="-102"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-561" y="42">cancela!</label>
			<nail x="-493" y="42"/>
			<nail x="-569" y="42"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="-603" y="-161">cospelesIngresados&lt;5</label>
			<label kind="synchronisation" x="-561" y="-144">ingresa!</label>
			<label kind="assignment" x="-595" y="-127">cospelesIngresados++</label>
			<nail x="-569" y="-102"/>
			<nail x="-493" y="-102"/>
		</transition>
	</template>
	<template>
		<name>Auditor</name>
		<declaration>//Repone las botellas vendidas
void reponer(){
    int i;
    for (i=0;i&lt;N;i++){
        bebidas[i].stock = STOCK;
        bebidas[i].vendidos = 0;
    }
}
</declaration>
		<location id="id5" x="0" y="0">
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-68" y="136">sacarRecaudacion!</label>
			<label kind="assignment" x="-51" y="153">recolectados = 0</label>
			<nail x="93" y="127"/>
			<nail x="-93" y="127"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-42" y="-144">reponerStock!</label>
			<label kind="assignment" x="-34" y="-127">reponer()</label>
			<nail x="-102" y="-102"/>
			<nail x="102" y="-102"/>
		</transition>
	</template>
	<system>system Maquina,Usuario,Auditor;</system>
	<queries>
		<query>
			<formula>A[] Maquina.dentroDeLimites()</formula>
			<comment>Esta pregunta verifica seguridad. La funcion verifica que el stock de las diferentes botellas sea mayor o igual a 0 y menor o  igual que el maximo especificado</comment>
		</query>
		<query>
			<formula>A[] cospelesIngresados &lt;= 5</formula>
			<comment>Una de las restricciones de la realidad es que la maxima cantidad de cospeles que el usuario puede ingresar corresponde a la cantidad de cospeles necesarios para adquirir la bebida mas cara, que vale 5 cospeles.
Por lo tanto con esta pregunta se está intentado verificar tal restricción. Se busca que para todas las ejecuciones posibles, la cantidad de cospeles ingresados por un usuario no supere la cantidad de 5.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; recolectados == CAPACIDAD_ALCANCIA + 4</formula>
			<comment>Con esta consulta se verifica que en alguna ejecucion del modelo, se alcanza a recaudar la maxima cantidad de cospeles posible.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; recolectados == CAPACIDAD_ALCANCIA</formula>
			<comment>Con esta consulta se verifica que en alguna ejecucion del modelo, se alcanza a recaudar la capacidad de cospeles de la alcancia.</comment>
		</query>
		<query>
			<formula>A[] recolectados &gt;= 0 and recolectados &lt;= CAPACIDAD_ALCANCIA + 4</formula>
			<comment>Con esta pregunta se busca verificar que el modelo se mantenga dentro de los valores esperados</comment>
		</query>
		<query>
			<formula>A[] Maquina.x &lt;= tiempoAgotado</formula>
			<comment>En esta consulta se chequea seguridad. Por la disposicion del modelo, el reloj siempre se debe resetear al momento del que el 
tiempo de espera se agota o antes, y por lo tanto, que el reloj alcance valores mayores significaria que hay una falta de 
actualizacion del valor del reloj en alguna transicion.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Maquina.TodoVendido()</formula>
			<comment>Esta consulta chequea alcanzabilidad. En particular, se esta preguntando si en algun momento de la ejecucion se acaba el stock
de todas las bebidas.</comment>
		</query>
		<query>
			<formula>Maquina.TodoVendido() --&gt; !Maquina.TodoVendido()</formula>
			<comment>Esta consulta verifica si cualquier camino que empieza en un estado en el que no hay stock de ninguno de los tres tipos de bebidas,
alcanza un estado en el que hay stock de todas las bebidas. Es decir, siempre se repone el stock mediante el auditor.</comment>
		</query>
		<query>
			<formula>Maquina.Libre --&gt; Maquina.Ocupada</formula>
			<comment>Se intenta chequear si la máquina está libre, siempre puede pasar a un estado ocupado. Es decir, nunca está libre indefinidamente.</comment>
		</query>
		<query>
			<formula>Maquina.Ocupada --&gt; (Maquina.Libre || Maquina.Procesando)</formula>
			<comment>Se intenta chequear si la máquina está ocupada pasará a estar libre o bien procesando un pedido</comment>
		</query>
		<query>
			<formula>A[] Maquina.Libre imply cospelesIngresados == 0</formula>
			<comment>Esta consulta chequea seguridad. Se intenta ver que si la máquina está Libre, no haya quedado ningún cospel ingresado de alguna 
operación anterior.</comment>
		</query>
		<query>
			<formula>A[] Maquina.x == tiempoAgotado imply cospelesIngresados&gt;=1</formula>
			<comment>Esta consulta chequea seguridad. Se intenta ver que si para todas las ejecuciones el tiempo de espera se llega a agotar únicamente cuando hay 1 o más cospeles ingresados.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Maquina.x == tiempoAgotado and cospelesIngresados&gt;=1</formula>
			<comment>Esta consulta chequea principalmente alcanzabilidad. Lo que intenta ver es que si en algún momento de la ejecución se ejecuta 
la transición que cancela la operación porque agotó el tiempo de espera.</comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>Con esta consulta, se esta chequeando que en todos los posibles estados del sistema, siempre va a haber una transición habilitada
para dispararse. Es decir, que siempre que se está en un estado es posible evolucionar a un estado sucesor (que puede ser el mismo
estado). </comment>
		</query>
	</queries>
</nta>
